{"ast":null,"code":"// import ApiCep from '@/api/cep'\nimport ApiContacts from '@/api/contacts';\nimport { mapActions, mapGetters, mapState } from 'vuex';\nimport { mask } from 'vue-the-mask';\nimport { BAlert, BButton, BCol, BForm, BModal, BRow, BSpinner } from 'bootstrap-vue';\nimport BreadCrump from '@/components/BreadCrump';\nimport FooterComponent from '@/components/FooterComponent';\nimport HeaderComponent from '@/components/HeaderComponent';\nimport MainComponent from '@/components/MainComponent';\nfunction initialForm() {\n  return {\n    name: '',\n    cpf: '',\n    birth: ''\n    // email: '',\n    // phone: '',\n    // zipCode: '',\n    // number: '',\n    // address: '',\n    // complement: '',\n    // neighborhood: '',\n    // city: '',\n    // state: ''\n  };\n}\n\nexport default {\n  name: 'FormView',\n  components: {\n    BAlert,\n    BButton,\n    BCol,\n    BForm,\n    BModal,\n    BRow,\n    BSpinner,\n    BreadCrump,\n    FooterComponent,\n    HeaderComponent,\n    MainComponent\n  },\n  directives: {\n    mask\n  },\n  data() {\n    return {\n      errorSaving: false,\n      form: initialForm(),\n      // inputZipCodeError: false,\n      loadingDataContact: false,\n      modalFinished: false,\n      saveLoading: false\n      // txtModalNotFound: \"O CEP não foi encontrado, favor preencher os campos de endereço.\",\n      // txtModalError: \"Houve um erro ao carregar as informações do endereço, favor preencher os campos de endereço.\",\n      // zipCodeLoading: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters(['detailContact']),\n    ...mapState(['contacts']),\n    newRegister() {\n      return this.$route.name === 'new-register';\n    },\n    txtTitle() {\n      return this.newRegister ? 'Novo cadastro' : 'Editar cadastro';\n    },\n    txtBtnSubmit() {\n      return this.newRegister ? 'Cadastrar' : 'Alterar';\n    },\n    txtModalFinishedError() {\n      return this.newRegister ? \"Houve um erro ao salvar o contato.<br />Deseja adicionar novamente o contato?\" : \"Houve um erro ao alterar o contato.<br />Deseja tentar alterar novamente o contato?\";\n    },\n    txtModalFinishedSuccess() {\n      return this.newRegister ? \"Contato adicionado com sucesso.<br />Deseja adicionar um novo contato?\" : \"Contato alterado com sucesso.<br />Deseja continuar na editando este contato?\";\n    }\n  },\n  watch: {\n    contacts() {\n      this.getDetailContact(this.$route.params);\n    }\n  },\n  created() {\n    if (this.$route.name === 'edit-register') {\n      this.loadingDataContact = true;\n      if (this.contacts.length === 0) {\n        this.getAllContacts();\n      } else {\n        this.getDetailContact(this.$route.params);\n      }\n    }\n  },\n  methods: {\n    ...mapActions(['getAllContacts']),\n    clearForm() {\n      // const objClear = Object.keys(this.form).reduce((acc, curr) => ({...acc, [curr]: \"\"}), {});\n      this.form = initialForm();\n    },\n    async createNewContact(form) {\n      this.errorSaving = false;\n      this.saveLoading = true;\n      await ApiContacts.newContact(form).then().catch(() => {\n        this.errorSaving = true;\n      }).finally(() => {\n        this.modalFinished = true;\n        this.saveLoading = false;\n      });\n    },\n    async editContact(form) {\n      this.errorSaving = false;\n      this.saveLoading = true;\n      await ApiContacts.editContact(this.$route.params.id, form).then().catch(() => {\n        this.errorSaving = true;\n      }).finally(() => {\n        this.modalFinished = true;\n        this.saveLoading = false;\n      });\n    },\n    fillAgain(clear) {\n      if (clear && this.newRegister) {\n        this.clearForm();\n      }\n      this.modalFinished = false;\n      this.$refs.nameInput.focus();\n    },\n    getDetailContact(id) {\n      const detail = this.detailContact(parseInt(id.id));\n      Object.assign(this.form, detail);\n      this.loadingDataContact = false;\n    },\n    onSubmit(event) {\n      event.preventDefault();\n      if (this.newRegister) {\n        this.createNewContact(this.form);\n      } else {\n        this.editContact(this.form);\n      }\n    },\n    // async queryCEP(number) {\n    //   const numberFormart = number.replace(/-/g, '');\n    //   this.inputZipCodeError = false;\n\n    //   if (numberFormart.length != 8) {\n    //     this.$refs.zipcode.focus();\n    //     this.inputZipCodeError = true;\n    //   } else {\n    //     this.zipCodeLoading = true;\n    //     await ApiCep.queryCep(numberFormart)\n    //       .then((resp) => {\n    //         if (resp.data?.erro) {\n    //           this.showModal(this.txtModalNotFound);\n    //         } else {\n    //           const { logradouro: address, bairro: neighborhood, localidade: city, uf: state } = resp.data;\n    //           // Object.assign(this.form, { address, neighborhood, city, state });\n    //           this.form = {...this.form, address, neighborhood, city, state};\n    //         }\n    //       })\n    //       .catch(() => {\n    //         this.showModal(this.txtModalError);\n    //       })\n    //       .finally(() => {\n    //         this.zipCodeLoading = false;\n    //       })\n    //   }\n    // },\n\n    showModal(title) {\n      this.$bvModal.msgBoxOk(title, {\n        centered: true,\n        okVariant: 'success'\n      });\n    }\n  }\n};","map":{"version":3,"names":["ApiContacts","mapActions","mapGetters","mapState","mask","BAlert","BButton","BCol","BForm","BModal","BRow","BSpinner","BreadCrump","FooterComponent","HeaderComponent","MainComponent","initialForm","name","cpf","birth","components","directives","data","errorSaving","form","loadingDataContact","modalFinished","saveLoading","computed","newRegister","$route","txtTitle","txtBtnSubmit","txtModalFinishedError","txtModalFinishedSuccess","watch","contacts","getDetailContact","params","created","length","getAllContacts","methods","clearForm","createNewContact","newContact","then","catch","finally","editContact","id","fillAgain","clear","$refs","nameInput","focus","detail","detailContact","parseInt","Object","assign","onSubmit","event","preventDefault","showModal","title","$bvModal","msgBoxOk","centered","okVariant"],"sources":["src/views/FormView.vue"],"sourcesContent":["<template>\n  <div>\n    <header-component />\n    <main-component>\n      <bread-crump :title=\"txtTitle\"/>\n      <div class=\"d-flex justify-content-sm-between flex-column flex-sm-row\">\n        <h2>{{ txtTitle }}</h2>\n      </div>\n\n      <b-row class=\"justify-content-center pt-5\">\n        <b-col md=\"8\">\n          <b-form @submit=\"onSubmit\">\n            <div v-if=\"loadingDataContact\" class=\"loading-data d-flex justify-content-center pt-5\">\n              <b-spinner\n                class=\"mt-5\"\n                label=\"Loading\"\n                style=\"width: 3rem; height: 3rem;\"\n                variant=\"primary\"\n              />\n            </div>\n            <b-form-group\n              id=\"input-group-1\"\n              label=\"Nome:\"\n              label-for=\"input-1\"\n            >\n              <b-form-input\n                ref=\"nameInput\"\n                id=\"input-1\"\n                v-model=\"form.name\"\n                type=\"text\"\n                required\n              />\n            </b-form-group>\n\n            <b-form-group\n              id=\"input-group-1\"\n              label=\"CPF:\"\n              label-for=\"input-1\"\n              :state=\"cpfValidationState\"\n            >\n              <b-form-input\n                :state=\"cpfValidationState\"\n                ref=\"cpfInput\"\n                id=\"input-1\"\n                v-model=\"form.cpf\"\n                v-mask=\"['###.###.###-##']\"\n                maxlength=\"14\"\n                type=\"text\"\n                required\n              />\n            </b-form-group>\n\n            <b-form-group\n              id=\"input-group-1\"\n              label=\"Data de nascimento:\"\n              label-for=\"input-1\"\n            >\n              <b-form-input\n                ref=\"birthInput\"\n                id=\"input-1\"\n                v-model=\"form.birth\"\n                v-mask=\"['##/##/####']\"\n                type=\"text\"\n                required\n              />\n            </b-form-group>\n\n            <!-- <b-form-group\n              id=\"input-group-2\"\n              class=\"mt-3\"\n              label=\"E-mail:\"\n              label-for=\"input-2\"\n            >\n              <b-form-input\n                id=\"input-2\"\n                v-model=\"form.email\"\n                type=\"email\"\n                required\n              />\n            </b-form-group>\n\n            <b-row>\n              <b-col md=\"6\">\n                <b-form-group\n                  id=\"input-group-3\"\n                  class=\"mt-3\"\n                  label=\"Telefone:\"\n                  label-for=\"input-3\"\n                >\n                  <b-form-input\n                    id=\"input-3\"\n                    v-model=\"form.phone\"\n                    v-mask=\"['(##) ####-####', '(##) #####-####']\"\n                    required\n                  />\n                </b-form-group>\n              </b-col>\n            </b-row>\n\n            <b-row>\n              <b-col md=\"6\">\n                <b-form-group\n                  id=\"input-group-4\"\n                  class=\"mt-3 input-zipcode\"\n                  label=\"CEP:\"\n                  label-for=\"input-4\"\n                >\n                  <b-form-input\n                    ref=\"zipcode\"\n                    id=\"input-4\"\n                    v-model=\"form.zipCode\"\n                    v-mask=\"'#####-###'\"\n                    required\n                    @change=\"queryCEP\"\n                  />\n                  <b-spinner\n                    v-if=\"zipCodeLoading\"\n                    class=\"flex-shrink-0 ml-2\"\n                    variant=\"info\"\n                  />\n                </b-form-group>\n                <small\n                  v-if=\"inputZipCodeError\"\n                  class=\"text-danger\"\n                >\n                  O CEP deve conter 9 números.\n                </small>\n              </b-col>\n            </b-row>\n\n            <b-form-group\n              id=\"input-group-5\"\n              class=\"mt-3\"\n              label=\"Endereço:\"\n              label-for=\"input-5\"\n            >\n              <b-form-input\n                id=\"input-5\"\n                v-model=\"form.address\"\n                required\n              />\n            </b-form-group>\n\n            <b-row>\n              <b-col md=\"5\">\n                <b-form-group\n                  id=\"input-group-6\"\n                  class=\"mt-3\"\n                  label=\"Número:\"\n                  label-for=\"input-6\"\n                >\n                  <b-form-input\n                    id=\"input-6\"\n                    v-model=\"form.number\"\n                    required\n                  />\n                </b-form-group>\n              </b-col>\n              <b-col md=\"7\">\n                <b-form-group\n                  id=\"input-group-7\"\n                  class=\"mt-3\"\n                  label=\"Complemento:\"\n                  label-for=\"input-7\"\n                >\n                  <b-form-input\n                    id=\"input-7\"\n                    v-model=\"form.complement\"\n                  />\n                </b-form-group>\n              </b-col>\n            </b-row>\n\n            <b-form-group\n              id=\"input-group-8\"\n              class=\"mt-3\"\n              label=\"Bairro:\"\n              label-for=\"input-8\"\n            >\n              <b-form-input\n                id=\"input-8\"\n                v-model=\"form.neighborhood\"\n                required\n              />\n            </b-form-group>\n\n            <b-row>\n              <b-col md=\"8\">\n                <b-form-group\n                  id=\"input-group-9\"\n                  class=\"mt-3\"\n                  label=\"Cidade:\"\n                  label-for=\"input-9\"\n                >\n                  <b-form-input\n                    id=\"input-9\"\n                    v-model=\"form.city\"\n                    required\n                  />\n                </b-form-group>\n              </b-col>\n              <b-col md=\"4\">\n                <b-form-group\n                  id=\"input-group-10\"\n                  class=\"mt-3\"\n                  label=\"Estado:\"\n                  label-for=\"input-10\"\n                >\n                  <b-form-input\n                    id=\"input-10\"\n                    v-model=\"form.state\"\n                    required\n                  />\n                </b-form-group>\n              </b-col>\n            </b-row> -->\n\n            <b-button\n              type=\"submit\"\n              variant=\"primary\"\n              class=\"mt-4\"\n              :disabled=\"saveLoading\"\n            >\n              <template v-if=\"saveLoading\">\n                <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n                Salvando...\n              </template>\n              <template v-else>\n                {{ txtBtnSubmit }}\n              </template>\n            </b-button>\n          </b-form>\n        </b-col>\n      </b-row>\n\n      <b-modal\n        v-model=\"modalFinished\"\n        hideHeaderClose\n        noCloseOnEsc\n      >\n        <b-alert :variant=\"errorSaving ? 'danger': 'success'\" show class=\"mb-0\">\n          <p class=\"mb-0\">\n            <span v-html=\"errorSaving ? txtModalFinishedError : txtModalFinishedSuccess\" />\n          </p>\n        </b-alert>\n\n        <template #modal-footer>\n          <b-button\n            variant=\"primary\"\n            @click=\"fillAgain(!errorSaving)\"\n          >\n            Sim\n          </b-button>\n          <b-button\n            variant=\"success\"\n            to=\"/\"\n          >\n            Não, ir para tela inicial\n          </b-button>\n        </template>\n      </b-modal>\n    </main-component>\n    <footer-component />\n  </div>\n</template>\n\n<script>\n// import ApiCep from '@/api/cep'\nimport ApiContacts from '@/api/contacts'\n\nimport { mapActions, mapGetters, mapState } from 'vuex';\nimport { mask } from 'vue-the-mask'\nimport { BAlert, BButton, BCol, BForm, BModal, BRow, BSpinner } from 'bootstrap-vue'\n\nimport BreadCrump from '@/components/BreadCrump'\nimport FooterComponent from '@/components/FooterComponent'\nimport HeaderComponent from '@/components/HeaderComponent'\nimport MainComponent from '@/components/MainComponent'\n\nfunction initialForm() {\n  return {\n    name: '',\n    cpf: '',\n    birth: '',\n    // email: '',\n    // phone: '',\n    // zipCode: '',\n    // number: '',\n    // address: '',\n    // complement: '',\n    // neighborhood: '',\n    // city: '',\n    // state: ''\n  }\n}\n\nexport default {\n  name: 'FormView',\n\n  components: {\n    BAlert,\n    BButton,\n    BCol,\n    BForm,\n    BModal,\n    BRow,\n    BSpinner,\n    BreadCrump,\n    FooterComponent,\n    HeaderComponent,\n    MainComponent\n  },\n\n  directives: { mask },\n\n  data() {\n    return {\n      errorSaving: false,\n      form: initialForm(),\n      // inputZipCodeError: false,\n      loadingDataContact: false,\n      modalFinished: false,\n      saveLoading: false,\n      // txtModalNotFound: \"O CEP não foi encontrado, favor preencher os campos de endereço.\",\n      // txtModalError: \"Houve um erro ao carregar as informações do endereço, favor preencher os campos de endereço.\",\n      // zipCodeLoading: false,\n    }\n  },\n\n  computed: {\n    ...mapGetters(['detailContact']),\n    ...mapState(['contacts']),\n\n    newRegister() {\n      return this.$route.name  === 'new-register';\n    },\n    txtTitle() {\n      return this.newRegister ? 'Novo cadastro' : 'Editar cadastro'\n    },\n    txtBtnSubmit() {\n      return this.newRegister ? 'Cadastrar' : 'Alterar'\n    },\n    txtModalFinishedError() {\n      return this.newRegister ?\n        \"Houve um erro ao salvar o contato.<br />Deseja adicionar novamente o contato?\" :\n        \"Houve um erro ao alterar o contato.<br />Deseja tentar alterar novamente o contato?\";\n    },\n    txtModalFinishedSuccess() {\n      return this.newRegister ?\n        \"Contato adicionado com sucesso.<br />Deseja adicionar um novo contato?\":\n        \"Contato alterado com sucesso.<br />Deseja continuar na editando este contato?\";\n    },\n  },\n\n  watch: {\n    contacts() {\n      this.getDetailContact(this.$route.params);\n    },\n  },\n\n  created () {\n    if (this.$route.name === 'edit-register') {\n      this.loadingDataContact = true;\n      if (this.contacts.length === 0) {\n        this.getAllContacts();\n      } else {\n        this.getDetailContact(this.$route.params);\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions(['getAllContacts']),\n\n    clearForm() {\n      // const objClear = Object.keys(this.form).reduce((acc, curr) => ({...acc, [curr]: \"\"}), {});\n      this.form = initialForm();\n    },\n\n    async createNewContact(form) {\n      this.errorSaving = false;\n      this.saveLoading = true;\n\n      await ApiContacts.newContact(form)\n        .then()\n        .catch(() => {\n          this.errorSaving = true;\n        })\n        .finally(() => {\n          this.modalFinished = true;\n          this.saveLoading = false;\n        })\n    },\n\n    async editContact(form) {\n      this.errorSaving = false;\n      this.saveLoading = true;\n\n      await ApiContacts.editContact(this.$route.params.id, form)\n        .then()\n        .catch(() => {\n          this.errorSaving = true;\n        })\n        .finally(() => {\n          this.modalFinished = true;\n          this.saveLoading = false;\n        })\n    },\n\n    fillAgain(clear) {\n      if (clear && this.newRegister) {\n        this.clearForm();\n      }\n      this.modalFinished = false;\n      this.$refs.nameInput.focus();\n    },\n\n    getDetailContact(id) {\n      const detail = this.detailContact(parseInt(id.id));\n      Object.assign(this.form, detail);\n      this.loadingDataContact = false;\n    },\n\n    onSubmit(event) {\n      event.preventDefault();\n\n      if (this.newRegister) {\n        this.createNewContact(this.form);\n      } else {\n        this.editContact(this.form);\n      }\n    },\n\n    // async queryCEP(number) {\n    //   const numberFormart = number.replace(/-/g, '');\n    //   this.inputZipCodeError = false;\n\n    //   if (numberFormart.length != 8) {\n    //     this.$refs.zipcode.focus();\n    //     this.inputZipCodeError = true;\n    //   } else {\n    //     this.zipCodeLoading = true;\n    //     await ApiCep.queryCep(numberFormart)\n    //       .then((resp) => {\n    //         if (resp.data?.erro) {\n    //           this.showModal(this.txtModalNotFound);\n    //         } else {\n    //           const { logradouro: address, bairro: neighborhood, localidade: city, uf: state } = resp.data;\n    //           // Object.assign(this.form, { address, neighborhood, city, state });\n    //           this.form = {...this.form, address, neighborhood, city, state};\n    //         }\n    //       })\n    //       .catch(() => {\n    //         this.showModal(this.txtModalError);\n    //       })\n    //       .finally(() => {\n    //         this.zipCodeLoading = false;\n    //       })\n    //   }\n    // },\n\n    showModal(title) {\n      this.$bvModal.msgBoxOk(title, {\n        centered: true,\n        okVariant: 'success'\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\">\n.input-zipcode {\n  > div {\n    align-items: center;\n    display: flex\n  }\n}\n</style>\n\n<style lang=\"scss\" scope>\n.loading-data {\n  background: rgba(0, 0, 0, 0.1);\n  height: 100%;\n  left: -5px;\n  position: absolute;\n  top: -5px;\n  width: 100%;\n  z-index: 10;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}