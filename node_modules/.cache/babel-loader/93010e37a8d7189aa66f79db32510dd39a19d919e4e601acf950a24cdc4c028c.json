{"ast":null,"code":"/*!\n * cpf-cnpj-validator v1.0.3\n * (c) 2020-present Carvalho, Vinicius Luiz <carvalho.viniciusluiz@gmail.com>\n * Released under the MIT License.\n */\nconst BLACKLIST = ['00000000000', '11111111111', '22222222222', '33333333333', '44444444444', '55555555555', '66666666666', '77777777777', '88888888888', '99999999999', '12345678909'];\nconst STRICT_STRIP_REGEX = /[.-]/g;\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\nconst verifierDigit = digits => {\n  const numbers = digits.split('').map(number => {\n    return parseInt(number, 10);\n  });\n  const modulus = numbers.length + 1;\n  const multiplied = numbers.map((number, index) => number * (modulus - index));\n  const mod = multiplied.reduce((buffer, number) => buffer + number) % 11;\n  return mod < 2 ? 0 : 11 - mod;\n};\nconst strip = (number, strict) => {\n  const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (number || '').replace(regex, '');\n};\nconst format = number => {\n  return strip(number).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, '$1.$2.$3-$4');\n};\nconst isValid = (number, strict) => {\n  const stripped = strip(number, strict);\n  if (!stripped) {\n    return false;\n  }\n  if (stripped.length !== 11) {\n    return false;\n  }\n  if (BLACKLIST.includes(stripped)) {\n    return false;\n  }\n  let numbers = stripped.substr(0, 9);\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return numbers.substr(-2) === stripped.substr(-2);\n};\nconst generate = formatted => {\n  let numbers = '';\n  for (let i = 0; i < 9; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return formatted ? format(numbers) : numbers;\n};\nvar cpf = {\n  verifierDigit,\n  strip,\n  format,\n  isValid,\n  generate\n};\nconst BLACKLIST$1 = ['00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444', '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999'];\nconst STRICT_STRIP_REGEX$1 = /[-\\\\/.]/g;\nconst LOOSE_STRIP_REGEX$1 = /[^\\d]/g;\nconst verifierDigit$1 = digits => {\n  let index = 2;\n  const reverse = digits.split('').reduce((buffer, number) => {\n    return [parseInt(number, 10)].concat(buffer);\n  }, []);\n  const sum = reverse.reduce((buffer, number) => {\n    buffer += number * index;\n    index = index === 9 ? 2 : index + 1;\n    return buffer;\n  }, 0);\n  const mod = sum % 11;\n  return mod < 2 ? 0 : 11 - mod;\n};\nconst strip$1 = (number, strict) => {\n  const regex = strict ? STRICT_STRIP_REGEX$1 : LOOSE_STRIP_REGEX$1;\n  return (number || '').replace(regex, '');\n};\nconst format$1 = number => {\n  return strip$1(number).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\n};\nconst isValid$1 = (number, strict) => {\n  const stripped = strip$1(number, strict);\n  if (!stripped) {\n    return false;\n  }\n  if (stripped.length !== 14) {\n    return false;\n  }\n  if (BLACKLIST$1.includes(stripped)) {\n    return false;\n  }\n  let numbers = stripped.substr(0, 12);\n  numbers += verifierDigit$1(numbers);\n  numbers += verifierDigit$1(numbers);\n  return numbers.substr(-2) === stripped.substr(-2);\n};\nconst generate$1 = formatted => {\n  let numbers = '';\n  for (let i = 0; i < 12; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n  numbers += verifierDigit$1(numbers);\n  numbers += verifierDigit$1(numbers);\n  return formatted ? format$1(numbers) : numbers;\n};\nvar cnpj = {\n  verifierDigit: verifierDigit$1,\n  strip: strip$1,\n  format: format$1,\n  isValid: isValid$1,\n  generate: generate$1\n};\nconst validator = joi => ({\n  type: 'document',\n  base: joi.string(),\n  messages: {\n    'document.cpf': 'CPF inv치lido',\n    'document.cnpj': 'CNPJ inv치lido'\n  },\n  rules: {\n    cpf: {\n      validate(value, helpers, args, options) {\n        if (!cpf.isValid(value)) {\n          return helpers.error('document.cpf');\n        }\n        return value;\n      }\n    },\n    cnpj: {\n      validate(value, helpers, args, options) {\n        if (!cnpj.isValid(value)) {\n          return helpers.error('document.cnpj');\n        }\n        return value;\n      }\n    }\n  }\n});\nexport default validator;\nexport { cpf, cnpj, validator };","map":{"version":3,"names":["BLACKLIST","STRICT_STRIP_REGEX","LOOSE_STRIP_REGEX","verifierDigit","digits","numbers","split","map","number","parseInt","modulus","length","multiplied","index","mod","reduce","buffer","strip","strict","regex","replace","format","isValid","stripped","includes","substr","generate","formatted","i","Math","floor","random","cpf","BLACKLIST$1","STRICT_STRIP_REGEX$1","LOOSE_STRIP_REGEX$1","verifierDigit$1","reverse","concat","sum","strip$1","format$1","isValid$1","generate$1","cnpj","validator","joi","type","base","string","messages","rules","validate","value","helpers","args","options","error"],"sources":["/home/wesley/cadastro-contatos-vue/node_modules/cpf-cnpj-validator/dist/cpf-cnpj-validator.es.js"],"sourcesContent":["/*!\n * cpf-cnpj-validator v1.0.3\n * (c) 2020-present Carvalho, Vinicius Luiz <carvalho.viniciusluiz@gmail.com>\n * Released under the MIT License.\n */\nconst BLACKLIST = [\r\n    '00000000000',\r\n    '11111111111',\r\n    '22222222222',\r\n    '33333333333',\r\n    '44444444444',\r\n    '55555555555',\r\n    '66666666666',\r\n    '77777777777',\r\n    '88888888888',\r\n    '99999999999',\r\n    '12345678909'\r\n];\r\nconst STRICT_STRIP_REGEX = /[.-]/g;\r\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\r\nconst verifierDigit = (digits) => {\r\n    const numbers = digits\r\n        .split('')\r\n        .map(number => {\r\n        return parseInt(number, 10);\r\n    });\r\n    const modulus = numbers.length + 1;\r\n    const multiplied = numbers.map((number, index) => number * (modulus - index));\r\n    const mod = multiplied.reduce((buffer, number) => buffer + number) % 11;\r\n    return (mod < 2 ? 0 : 11 - mod);\r\n};\r\nconst strip = (number, strict) => {\r\n    const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\r\n    return (number || '').replace(regex, '');\r\n};\r\nconst format = (number) => {\r\n    return strip(number).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, '$1.$2.$3-$4');\r\n};\r\nconst isValid = (number, strict) => {\r\n    const stripped = strip(number, strict);\r\n    if (!stripped) {\r\n        return false;\r\n    }\r\n    if (stripped.length !== 11) {\r\n        return false;\r\n    }\r\n    if (BLACKLIST.includes(stripped)) {\r\n        return false;\r\n    }\r\n    let numbers = stripped.substr(0, 9);\r\n    numbers += verifierDigit(numbers);\r\n    numbers += verifierDigit(numbers);\r\n    return numbers.substr(-2) === stripped.substr(-2);\r\n};\r\nconst generate = (formatted) => {\r\n    let numbers = '';\r\n    for (let i = 0; i < 9; i += 1) {\r\n        numbers += Math.floor(Math.random() * 9);\r\n    }\r\n    numbers += verifierDigit(numbers);\r\n    numbers += verifierDigit(numbers);\r\n    return (formatted ? format(numbers) : numbers);\r\n};\r\nvar cpf = {\r\n    verifierDigit,\r\n    strip,\r\n    format,\r\n    isValid,\r\n    generate,\r\n};\n\nconst BLACKLIST$1 = [\r\n    '00000000000000',\r\n    '11111111111111',\r\n    '22222222222222',\r\n    '33333333333333',\r\n    '44444444444444',\r\n    '55555555555555',\r\n    '66666666666666',\r\n    '77777777777777',\r\n    '88888888888888',\r\n    '99999999999999'\r\n];\r\nconst STRICT_STRIP_REGEX$1 = /[-\\\\/.]/g;\r\nconst LOOSE_STRIP_REGEX$1 = /[^\\d]/g;\r\nconst verifierDigit$1 = (digits) => {\r\n    let index = 2;\r\n    const reverse = digits.split('').reduce((buffer, number) => {\r\n        return [parseInt(number, 10)].concat(buffer);\r\n    }, []);\r\n    const sum = reverse.reduce((buffer, number) => {\r\n        buffer += number * index;\r\n        index = (index === 9 ? 2 : index + 1);\r\n        return buffer;\r\n    }, 0);\r\n    const mod = sum % 11;\r\n    return (mod < 2 ? 0 : 11 - mod);\r\n};\r\nconst strip$1 = (number, strict) => {\r\n    const regex = strict ? STRICT_STRIP_REGEX$1 : LOOSE_STRIP_REGEX$1;\r\n    return (number || '').replace(regex, '');\r\n};\r\nconst format$1 = (number) => {\r\n    return strip$1(number).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n};\r\nconst isValid$1 = (number, strict) => {\r\n    const stripped = strip$1(number, strict);\r\n    if (!stripped) {\r\n        return false;\r\n    }\r\n    if (stripped.length !== 14) {\r\n        return false;\r\n    }\r\n    if (BLACKLIST$1.includes(stripped)) {\r\n        return false;\r\n    }\r\n    let numbers = stripped.substr(0, 12);\r\n    numbers += verifierDigit$1(numbers);\r\n    numbers += verifierDigit$1(numbers);\r\n    return numbers.substr(-2) === stripped.substr(-2);\r\n};\r\nconst generate$1 = (formatted) => {\r\n    let numbers = '';\r\n    for (let i = 0; i < 12; i += 1) {\r\n        numbers += Math.floor(Math.random() * 9);\r\n    }\r\n    numbers += verifierDigit$1(numbers);\r\n    numbers += verifierDigit$1(numbers);\r\n    return (formatted ? format$1(numbers) : numbers);\r\n};\r\nvar cnpj = {\r\n    verifierDigit: verifierDigit$1,\r\n    strip: strip$1,\r\n    format: format$1,\r\n    isValid: isValid$1,\r\n    generate: generate$1\r\n};\n\nconst validator = joi => ({\r\n    type: 'document',\r\n    base: joi.string(),\r\n    messages: {\r\n        'document.cpf': 'CPF inv치lido',\r\n        'document.cnpj': 'CNPJ inv치lido'\r\n    },\r\n    rules: {\r\n        cpf: {\r\n            validate(value, helpers, args, options) {\r\n                if (!cpf.isValid(value)) {\r\n                    return helpers.error('document.cpf');\r\n                }\r\n                return value;\r\n            }\r\n        },\r\n        cnpj: {\r\n            validate(value, helpers, args, options) {\r\n                if (!cnpj.isValid(value)) {\r\n                    return helpers.error('document.cnpj');\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n});\n\nexport default validator;\nexport { cpf, cnpj, validator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}