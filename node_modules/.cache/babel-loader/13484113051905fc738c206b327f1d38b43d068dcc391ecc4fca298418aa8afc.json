{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nimport ApiContacts from '@/api/contacts';\nVue.use(Vuex);\nconst state = {\n  contacts: [],\n  contactsErrorApi: false,\n  listLoading: true\n};\nconst getters = {\n  namesList(state) {\n    const {\n      contacts\n    } = state;\n    const names = contacts.reduce((namesArray, contact) => {\n      const {\n        id,\n        name\n      } = contact;\n      return [...namesArray, {\n        id,\n        name\n      }];\n    }, []);\n    return names;\n  },\n  detailContact: state => id => {\n    const detail = state.contacts.filter(contact => contact.id === id);\n    return detail[0];\n  }\n};\nconst mutations = {\n  SET_CONTACTS(state, payload) {\n    state.contacts = payload;\n  },\n  SET_LIST_LOADING(state, payload) {\n    state.listLoading = payload;\n  },\n  SET_CONTACTS_ERROR_API(state, payload) {\n    state.contactsErrorApi = payload;\n  }\n};\nconst actions = {\n  getAllContacts: async ({\n    commit\n  }) => {\n    commit('SET_CONTACTS_ERROR_API', false);\n    await ApiContacts.getAllContacts().then(response => {\n      commit('SET_CONTACTS', response.data);\n    }).catch(() => {\n      commit('SET_CONTACTS_ERROR_API', true);\n    }).finally(() => {\n      commit('SET_LIST_LOADING', false);\n    });\n  },\n  removeContact({\n    commit\n  }, payload) {\n    const {\n      id,\n      contacts\n    } = payload;\n    const newContacts = contacts.filter(item => {\n      return item.id != id;\n    });\n    commit('SET_CONTACTS', newContacts);\n  },\n  setLoading({\n    commit\n  }, payload) {\n    commit('SET_LIST_LOADING', payload);\n  }\n};\nexport default new Vuex.Store({\n  state,\n  getters,\n  mutations,\n  actions\n});","map":{"version":3,"names":["Vue","Vuex","ApiContacts","use","state","contacts","contactsErrorApi","listLoading","getters","namesList","names","reduce","namesArray","contact","id","name","detailContact","detail","filter","mutations","SET_CONTACTS","payload","SET_LIST_LOADING","SET_CONTACTS_ERROR_API","actions","getAllContacts","commit","then","response","data","catch","finally","removeContact","newContacts","item","setLoading","Store"],"sources":["/home/wesley/escriba/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport ApiContacts from '@/api/contacts'\n\nVue.use(Vuex)\n\nconst state = {\n  contacts: [],\n  contactsErrorApi: false,\n  listLoading: true,\n}\n\nconst getters = {\n  namesList(state) {\n    const { contacts } = state;\n\n    const names = contacts.reduce((namesArray, contact) => {\n      const {id, name} = contact;\n      return [...namesArray, {id, name}];\n    }, []);\n\n    return names;\n  },\n\n  detailContact: (state) => (id) => {\n    const detail = state.contacts.filter((contact) => contact.id === id);\n    return detail[0];\n  },\n}\n\nconst mutations = {\n  SET_CONTACTS(state, payload) {\n    state.contacts = payload;\n  },\n\n  SET_LIST_LOADING(state, payload) {\n    state.listLoading = payload;\n  },\n\n  SET_CONTACTS_ERROR_API(state, payload) {\n    state.contactsErrorApi = payload;\n  },\n}\n\nconst actions = {\n  getAllContacts: async ({ commit }) => {\n    commit('SET_CONTACTS_ERROR_API', false);\n    await ApiContacts.getAllContacts()\n      .then((response) => {\n        commit('SET_CONTACTS', response.data);\n      })\n      .catch(() => {\n        commit('SET_CONTACTS_ERROR_API', true);\n      })\n      .finally(() => {\n        commit('SET_LIST_LOADING', false);\n      })\n  },\n\n  removeContact({ commit }, payload) {\n    const { id, contacts } = payload;\n    const newContacts = contacts.filter((item) => {\n      return item.id != id;\n    })\n    commit('SET_CONTACTS', newContacts);\n  },\n\n  setLoading({ commit }, payload) {\n    commit('SET_LIST_LOADING', payload);\n  },\n}\n\nexport default new Vuex.Store({\n  state,\n  getters,\n  mutations,\n  actions\n})\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,WAAW,MAAM,gBAAgB;AAExCF,GAAG,CAACG,GAAG,CAACF,IAAI,CAAC;AAEb,MAAMG,KAAK,GAAG;EACZC,QAAQ,EAAE,EAAE;EACZC,gBAAgB,EAAE,KAAK;EACvBC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,SAASA,CAACL,KAAK,EAAE;IACf,MAAM;MAAEC;IAAS,CAAC,GAAGD,KAAK;IAE1B,MAAMM,KAAK,GAAGL,QAAQ,CAACM,MAAM,CAAC,CAACC,UAAU,EAAEC,OAAO,KAAK;MACrD,MAAM;QAACC,EAAE;QAAEC;MAAI,CAAC,GAAGF,OAAO;MAC1B,OAAO,CAAC,GAAGD,UAAU,EAAE;QAACE,EAAE;QAAEC;MAAI,CAAC,CAAC;IACpC,CAAC,EAAE,EAAE,CAAC;IAEN,OAAOL,KAAK;EACd,CAAC;EAEDM,aAAa,EAAGZ,KAAK,IAAMU,EAAE,IAAK;IAChC,MAAMG,MAAM,GAAGb,KAAK,CAACC,QAAQ,CAACa,MAAM,CAAEL,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKA,EAAE,CAAC;IACpE,OAAOG,MAAM,CAAC,CAAC,CAAC;EAClB;AACF,CAAC;AAED,MAAME,SAAS,GAAG;EAChBC,YAAYA,CAAChB,KAAK,EAAEiB,OAAO,EAAE;IAC3BjB,KAAK,CAACC,QAAQ,GAAGgB,OAAO;EAC1B,CAAC;EAEDC,gBAAgBA,CAAClB,KAAK,EAAEiB,OAAO,EAAE;IAC/BjB,KAAK,CAACG,WAAW,GAAGc,OAAO;EAC7B,CAAC;EAEDE,sBAAsBA,CAACnB,KAAK,EAAEiB,OAAO,EAAE;IACrCjB,KAAK,CAACE,gBAAgB,GAAGe,OAAO;EAClC;AACF,CAAC;AAED,MAAMG,OAAO,GAAG;EACdC,cAAc,EAAE,MAAAA,CAAO;IAAEC;EAAO,CAAC,KAAK;IACpCA,MAAM,CAAC,wBAAwB,EAAE,KAAK,CAAC;IACvC,MAAMxB,WAAW,CAACuB,cAAc,CAAC,CAAC,CAC/BE,IAAI,CAAEC,QAAQ,IAAK;MAClBF,MAAM,CAAC,cAAc,EAAEE,QAAQ,CAACC,IAAI,CAAC;IACvC,CAAC,CAAC,CACDC,KAAK,CAAC,MAAM;MACXJ,MAAM,CAAC,wBAAwB,EAAE,IAAI,CAAC;IACxC,CAAC,CAAC,CACDK,OAAO,CAAC,MAAM;MACbL,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC;IACnC,CAAC,CAAC;EACN,CAAC;EAEDM,aAAaA,CAAC;IAAEN;EAAO,CAAC,EAAEL,OAAO,EAAE;IACjC,MAAM;MAAEP,EAAE;MAAET;IAAS,CAAC,GAAGgB,OAAO;IAChC,MAAMY,WAAW,GAAG5B,QAAQ,CAACa,MAAM,CAAEgB,IAAI,IAAK;MAC5C,OAAOA,IAAI,CAACpB,EAAE,IAAIA,EAAE;IACtB,CAAC,CAAC;IACFY,MAAM,CAAC,cAAc,EAAEO,WAAW,CAAC;EACrC,CAAC;EAEDE,UAAUA,CAAC;IAAET;EAAO,CAAC,EAAEL,OAAO,EAAE;IAC9BK,MAAM,CAAC,kBAAkB,EAAEL,OAAO,CAAC;EACrC;AACF,CAAC;AAED,eAAe,IAAIpB,IAAI,CAACmC,KAAK,CAAC;EAC5BhC,KAAK;EACLI,OAAO;EACPW,SAAS;EACTK;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}